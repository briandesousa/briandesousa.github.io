<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[BrianDeSousa.net RSS Feed]]></title><description><![CDATA[BrianDeSousa.net]]></description><link>https://briandesousa.net</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 24 Oct 2023 04:57:15 GMT</lastBuildDate><item><title><![CDATA[Using Node 11.7 Worker Threads with RxJS Observable]]></title><description><![CDATA[Node.js worker_threads + Observables With the release of Node 11.7, the worker_threads module becomes a standard feature and is no longer…]]></description><link>https://briandesousa.net/using-node-11-worker-threads-with-rxjs-observable/</link><guid isPermaLink="false">https://briandesousa.net/using-node-11-worker-threads-with-rxjs-observable/</guid><pubDate>Sat, 16 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;images/worker-thread-observable-1.png&quot; alt=&quot;Node.js worker_threads + Observables&quot;&gt;&lt;/p&gt;
&lt;p&gt;With the release of Node 11.7, the worker_threads module becomes a standard feature and is no longer hidden behind the &lt;code class=&quot;language-text&quot;&gt;--experimental-worker&lt;/code&gt; switch. The worker_threads module allows developers to run JavaScript asynchronously in light-weight, isolated threads contained within the main Node process. This article will be focusing on how use worker threads to execute a task asynchronously and stream data from that task back to the rest of your Node application using RxJS Observables.&lt;/p&gt;
&lt;p&gt;Before we get started, if you want to learn more about worker threads and why you might want to use them, I would recommend reading &lt;a href=&quot;https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10&quot;&gt;Node.js multithreading: What are Worker Threads and why do they matter?&lt;/a&gt; by &lt;a href=&quot;https://blog.logrocket.com/@gimenete&quot;&gt;Alberto Gimeno.&lt;/a&gt; Alberto has done a fantastic job explaining the purpose of the worker_thread module, provided some solid examples of where it makes sense to use it as well as demonstrated some alternate ways to build a multi-threaded Node app.&lt;/p&gt;
&lt;h2&gt;What are we building?&lt;/h2&gt;
&lt;p&gt;We are going to be building a simple Node app that creates a worker thread running a simulated long-running task that reports status back at regular intervals until it completes or until time runs out. The worker thread will be wrapped in an RxJS Observable so that the rest of the application can stream messages returned from the worker thread using the powerful RxJS library.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want to jump ahead and see the final solution, you can see it out on GitHub at&lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://github.com/briandesousa/node-worker-thread-rxjs&quot;&gt;briandesousa/node-worker-thread-rxjs&lt;/a&gt;****.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Setting up your environment&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is ensure our environment is ready to go:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Node 11.7.0+&lt;/li&gt;
&lt;li&gt;Use &lt;code class=&quot;language-text&quot;&gt;npm init&lt;/code&gt; to initialize a new NPM package&lt;/li&gt;
&lt;li&gt;Add a simple start script to the package.json to start the app: &lt;code class=&quot;language-text&quot;&gt;node node-parent-thread-rxjs.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the RxJS package with &lt;code class=&quot;language-text&quot;&gt;npm install -s rxjs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create node-parent-thread-rxjs.js which will contain code running on the main thread&lt;/li&gt;
&lt;li&gt;Create node-worker-thread-rxjs.js which will contain the implementation of the long-running task running on a separate thread&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Creating the worker thread&lt;/h2&gt;
&lt;p&gt;The worker thread has the logic to simulate a long-running task:&lt;/p&gt;
&lt;p&gt;[gist &lt;a href=&quot;https://gist.github.com/briandesousa/28949fe67a47362b1391bcd136debc0e&quot;&gt;https://gist.github.com/briandesousa/28949fe67a47362b1391bcd136debc0e&lt;/a&gt; /]&lt;/p&gt;
&lt;p&gt;Let&apos;s break this script down a bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use &lt;code class=&quot;language-text&quot;&gt;parentPort&lt;/code&gt; from the &lt;code class=&quot;language-text&quot;&gt;worker_threads&lt;/code&gt; modules to communicate back to the parent thread at 3 different points:
&lt;ul&gt;
&lt;li&gt;before the task begins&lt;/li&gt;
&lt;li&gt;while the task is running (within the do while loop) to provide status back to the parent thread&lt;/li&gt;
&lt;li&gt;when the task completes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We use &lt;code class=&quot;language-text&quot;&gt;workerData&lt;/code&gt; from the &lt;code class=&quot;language-text&quot;&gt;worker_threads&lt;/code&gt; module to pass in a time limit for how long (in seconds) the task should run for. The task completes when this time limit is reached (line 19).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This worker thread doesn&apos;t do anything particularly useful but it does demonstrate how a thread might receive instructions from its parent and stream multiple updates back to its parent.&lt;/p&gt;
&lt;h2&gt;Creating the parent thread&lt;/h2&gt;
&lt;p&gt;The parent thread has the following responsibilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start the worker thread, specifying how long the worker thread should run for. We will call this WORKER_TIME.&lt;/li&gt;
&lt;li&gt;Receiving updates from the worker thread in an observable stream&lt;/li&gt;
&lt;li&gt;Exit the application if the worker thread takes too long. We will call this MAX_WAIT_TIME.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/briandesousa/28f1c667e6c9b22aad5aaaa9a6dd36b7&quot;&gt;https://gist.github.com/briandesousa/28f1c667e6c9b22aad5aaaa9a6dd36b7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is a lot going on here. Let&apos;s focus on the &lt;code class=&quot;language-text&quot;&gt;runTask()&lt;/code&gt; function first:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use &lt;code class=&quot;language-text&quot;&gt;Observerable.create()&lt;/code&gt; from the &lt;code class=&quot;language-text&quot;&gt;rxjs&lt;/code&gt; package to create a new observable. This observable creates an instance of the worker thread and passes some data in.&lt;/li&gt;
&lt;li&gt;We map events output from the worker thread to the appropriate functions on the &lt;a href=&quot;http://reactivex.io/rxjs/class/es6/MiscJSDoc.js~ObserverDoc.html&quot;&gt;Observer&lt;/a&gt; interface:
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;message&lt;/code&gt; events are returned as normal values pushed to the subscriber through &lt;code class=&quot;language-text&quot;&gt;Observer.next()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;error&lt;/code&gt; events are mapped to &lt;code class=&quot;language-text&quot;&gt;Observer.error()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;when an &lt;code class=&quot;language-text&quot;&gt;exit&lt;/code&gt; message is received, we check the message to determine why the worker thread exited:
&lt;ul&gt;
&lt;li&gt;if a non-zero value is returned, then we know something went wrong and map the result to &lt;code class=&quot;language-text&quot;&gt;Observer.error()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if zero is returned, we call a callback function to notify the application that the task was completed on time, we send one final special COMPLETE_SIGNAL value and then we complete the observable with &lt;code class=&quot;language-text&quot;&gt;Observer.complete()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;runTask()&lt;/code&gt; doesn&apos;t have a very descriptive name however you can now see that it encapsulates the mapping logic between worker thread events and the Observable interface.&lt;/p&gt;
&lt;p&gt;Next, let&apos;s look at the at the &lt;code class=&quot;language-text&quot;&gt;main()&lt;/code&gt; function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We create the observable by calling &lt;code class=&quot;language-text&quot;&gt;runTask()&lt;/code&gt;. We pass in a simple callback that sets the &lt;code class=&quot;language-text&quot;&gt;completedOnTime&lt;/code&gt; flag to true so that we can report the reason why the observable completed.
&lt;ul&gt;
&lt;li&gt;Note that the observable we just created is a &lt;a href=&quot;http://reactivex.io/documentation/observable.html&quot;&gt;cold observable&lt;/a&gt;. It creates the worker thread and starts emitting events only once it has been subscribed to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We pipe some RxJS operator functions into the observable:
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;takeWhile()&lt;/code&gt; to stop the stream when the special COMPLETE_SIGNAL value is received&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;takeUntil()&lt;/code&gt; to stop the stream when time has run out&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We subscribe to the observable and log any values or errors that are received to the console. When the observable completes, we log the reason why it completed. If the reason is because we ran out of time, then we forcefully exit the application with &lt;code class=&quot;language-text&quot;&gt;process.exit(0)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Running the solution&lt;/h2&gt;
&lt;p&gt;Run the solution with your &lt;code class=&quot;language-text&quot;&gt;npm start&lt;/code&gt; command. Assuming MAX_WAIT_TIME is still set to 3 and WORKER_TIME is set to 10, you will see the following output:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Node multi-threading demo using worker_threads module in Node 11.7.0 [Main] Starting worker from process 4764 [Main] worker says: starting heavy duty work from process 4764 that will take 10s to complete [Main] worker says: heavy duty work in progress...1s [Main] worker says: heavy duty work in progress...2s [Main] worker says: heavy duty work in progress...3s [Main] worker could not complete its work in the allowed 3s, exiting Node process&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The worker thread started to do its work, but after 3 seconds, the app signaled to stop the stream. The main process was forcefully exited along with the worker thread before it had a chance to complete its task.&lt;/p&gt;
&lt;p&gt;You can also try adjusting the solution to see what happens when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WORKER_TIME is less than MAX_WAIT_TIME&lt;/li&gt;
&lt;li&gt;multiple worker threads are spawned from the parent thread by calling &lt;code class=&quot;language-text&quot;&gt;runTask()&lt;/code&gt; multiple times and creating multiple observables with different settings&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;We have only just scratched the surface of what is possible when you combine the streaming power and beauty of RxJS Observables with the worker_threads module. Happy threading!&lt;/p&gt;
&lt;p&gt;Check out the full solution on GitHub at &lt;a href=&quot;https://github.com/briandesousa/node-worker-thread-rxjs&quot;&gt;briandesousa/node-worker-thread-rxjs&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Case-sensitive import statements in TypeScript]]></title><description><![CDATA[I ran into a tricky TypeScript build issue with an Angular app that would build successfully on a Windows 10 machine but failed to build on…]]></description><link>https://briandesousa.net/case-sensitive-import-statements-in-typescript/</link><guid isPermaLink="false">https://briandesousa.net/case-sensitive-import-statements-in-typescript/</guid><pubDate>Sat, 09 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I ran into a tricky TypeScript build issue with an Angular app that would build successfully on a Windows 10 machine but failed to build on a Linux machine with a &quot;Cannot find module&quot; error. The cause of the problem ended up boiling down to a single case-sensitive character, &quot;X&quot; instead of &quot;x&quot;.&lt;/p&gt;
&lt;p&gt;When I first encountered the error, I started with the basic and compared my Linux and Windows environments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Confirmed the source code is identical on both machines&lt;/li&gt;
&lt;li&gt;Confirmed the Node and NPM versions are identical&lt;/li&gt;
&lt;li&gt;Confirmed the issue occurs even with the most basic build by removing build steps from my NPM script&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, instead of looking at the obvious my mind starts wandering to more complex causes. Is there something wrong with the NPM cache? I&apos;ll force clean it. Nope, that didn&apos;t do it. Maybe if I enable debug output, I can get additional information about the issue. Nope, nothing helpful here.&lt;/p&gt;
&lt;p&gt;After some time, I took a closer look at the import statement:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { Observable } from &apos;rxjs/RX&apos;; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &quot;RX&quot; didn&apos;t look right, but surely the build wasn&apos;t failing due to case sensitivity. I tried try changing it anyways. Jackpot!&lt;/p&gt;
&lt;p&gt;It turns out that import statements are &lt;strong&gt;case-insensitive on Mac and Windows but case-sensitive on Linux.&lt;/strong&gt; There is a &lt;code class=&quot;language-text&quot;&gt;forceConsistentCasingInFileNames&lt;/code&gt; tsconfig.json compiler option that can help detect these sorts of issues at compile time. In my case, this option had no effect on the build however this could be because the app is still using TypeScript 2.4. There seems to be some fixes related to this compiler option in TypeScript 2.7.2.&lt;/p&gt;
&lt;p&gt;If you have been bit by this issue too, you may want to consider adding your feedback to this &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/21736&quot;&gt;open suggestion issue 21736&lt;/a&gt; on the TypeScript GitHub repository.&lt;/p&gt;</content:encoded></item></channel></rss>